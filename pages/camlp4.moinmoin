<<Navigation(children)>>

Тут -- информация про camlp4, синтаксический препроцессор.

Тут лежит [[http://camlunity.ru/camlp4/|сгенерированная документация на camlp4 версии 3.11.1]].

Tip: (только при чём тут camlp4?)
[[http://utopia.knoware.nl/~hlub/uck/rlwrap/|rlwrap]] добавляет редактирование "командной" строки в ocaml-интерпретатор (в частности). Есть аналогичная утилита
, ledit его зовут, и написан на OCaml, но для его сборки требуется camlp5.

== Пример ==

{{{
$ rlwrap ocaml
        Objective Caml version 3.11.1

# #load "dynlink.cma";;
# #load "camlp4of.cma";;
        Camlp4 Parsing version 3.11.1

# open Camlp4.PreCast;;
# let expr = Gram.Entry.mk "expr";;
val expr : '_a Camlp4.PreCast.Gram.Entry.t = <abstr>
# EXTEND Gram
  expr: [ [ x = expr; "+"; y = expr -> x + y
          | e = INT -> int_of_string e ] ];
  END;;
- : unit = ()
# let _loc = Loc.ghost;;
val _loc : Camlp4.PreCast.Loc.t = <abstr>
# Gram.parse_string expr _loc "1+3";;
- : int = 4
}}}

== Рецепты ==

=== Quotation'ы ===

Quotation'ы всегда пишите в [[RevisedSyntax|revised синтаксисе]], иначе могут вылезти трудноуловимые неочевидные косяки (или баги в самом camlp4), основной код расширения можно писать и в original. См. например [[http://caml.inria.fr/mantis/view.php?id=5231|PR#5231]]

E.g. коммандная строка для сборки расширения : 
{{{ocamlfind ocamlc -c -package camlp4.quotations.r,camlp4.extend -syntax camlp4o pa_xxx.ml}}}

=== Ключи коммандной строки ===

При компиляции, препроцессору можно передать дополнительные опции: "-pp опции"

Используя ocamlfind, следует использовать -ppopt для передачи дополнительных ключей препроцессору

Ключ "-no_quot" отключает обработку quotations, позволяя, например, использовать в коде "<<".

=== Макросы ===

DEFINE, IFDEF, etc

{{{ocamlfind -package camlp4.macro}}}

=== Отладка самого camlp4 ===

Переменная окружения CAMLP4_DEBUG

Но см. [[http://caml.inria.fr/mantis/view.php?id=5120|PR#5120]]

=== Дамп кода в виде AST ===

{{{
$ echo 'let a = 2' > q.ml
$ camlp4o -filter Camlp4AstLifter q.ml 
let loc = Loc.ghost
in
  Ast.StVal (loc, Ast.BFalse,
    Ast.BiEq (loc, Ast.PaId (loc, Ast.IdLid (loc, "a")),
      Ast.ExInt (loc, "2")))
}}}

=== Печать AST ===

{{{
$ ocaml
        Objective Caml version 3.11.2

# #use "topfind";;
- : unit = ()
# #camlp4o;;
	Camlp4 Parsing version 3.11.2
# #require "camlp4.quotations";;
# open Camlp4.PreCast;; (* Будем использовать дефолтные модули Syntax Loc итд *)
# module P = Camlp4.Printers.OCaml.Make(Syntax);; (* Модуль для вывода в оригинальном синтаксисе *)
# let p = new P.printer ();; (* Создаём принтер *)
val p : P.printer = <obj>
# let _loc = Loc.ghost;; (* Пустой location для экспериментов *)
val _loc : Camlp4.PreCast.Loc.t = <abstr>
# let typ = <:ctyp< [ A | B ] >> in Format.printf "type is : %a\n%a\n" p#ctyp typ p#sig_item <:sig_item< type a = $typ$; >>;; (* содержимое quotation'ов в revised, а выводим в original! *)
type is : | A | B
type a = | A | B;;
- : unit = ()
}}}

=== Ресурсы ===

* [[http://ambassadortothecomputers.blogspot.com/p/reading-camlp4.html|Reading Camlp4]]
